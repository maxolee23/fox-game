{"version":3,"sources":["constants.js","ui.js","gameState.js","buttons.js","init.js"],"names":["ICONS","SCENES","TICK_RATE","RAIN_CHANCE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToEndCelebrating","scene","tick","wake","sleep","getHungry","startCelebrating","endCelebrating","poop","die","startGame","determineFoxState","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","clearTimes","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","console","log","nextTimeToTick","Date","now","nextAnimationFrame","requestAnimationFrame"],"mappings":"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","file":"init.67a0ab76.js","sourceRoot":"../src","sourcesContent":["export const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const SCENES = [\"day\", \"rain\"];\nexport const TICK_RATE = 3000;\nexport const RAIN_CHANCE = 0.2;\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 5;\n\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 8 + clock;\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 3) + 3 + clock;\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 8 + clock;\n","export const modFox = function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\nexport const modScene = function modScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n};\nexport const writeModal = function writeModal(text = \"\") {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import {\n  SCENES,\n  RAIN_CHANCE,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungerTime,\n  getNextDieTime,\n  getNextPoopTime,\n} from \"./constants\";\nimport { modFox, modScene, togglePoopBag, writeModal } from \"./ui\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  poopTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  scene: 0,\n  tick() {\n    this.clock++;\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    }\n\n    return this.clock;\n  },\n  startGame() {\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    writeModal();\n  },\n  wake() {\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    modFox(\"idling\");\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  handleUserAction(icon) {\n    // can't do actions while in these states\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      // do nothing\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    // execute the currently selected action\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather() {\n    this.scene = (1 + this.scene) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop() {\n    if (this.current === \"POOPING\") {\n      this.dieTime = -1;\n      togglePoopBag(true);\n      this.startCelebrating();\n      this.hungryTime = getNextHungerTime(this.clock);\n    }\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n  },\n  feed() {\n    // can only feed when hungry\n    if (this.current !== \"HUNGRY\") {\n      return;\n    }\n\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.timeToEndCelebrating = -1;\n    this.current = \"IDLING\";\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n  sleep() {\n    this.current = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    modScene(\"dead\");\n    modFox(\"dead\");\n    this.clearTimes();\n    writeModal(\"The fox died :( <br/> Press the middle button to restart\");\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, show) =>\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import game, { handleUserAction } from \"./gameState\";\nimport initButtons from \"./buttons\";\nimport { TICK_RATE } from \"./constants\";\n\nasync function init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n  function nextAnimationFrame() {\n    const now = Date.now();\n    if (nextTimeToTick <= now) {\n      game.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  nextAnimationFrame();\n}\n\ninit();\n"]}